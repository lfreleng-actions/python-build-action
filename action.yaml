---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# python-build-action
name: "🐍 Build Python Project"
description: "Builds a Python Project"

inputs:
  # Optional
  ARTEFACT_PATH:
    description: "Build artefacts will be output to this folder/directory"
    required: false
    type: string
    default: "dist"
  ARTEFACT_UPLOAD:
    description: "Build artefacts will be output to this folder/directory"
    required: false
    type: boolean
    default: true
  PURGE_ARTEFACT_PATH:
    description: "Purge target artefact path prior to builds"
    required: false
    type: boolean
    default: false
  TAG:
    description: "Explicit tag/version for this build (semantic)"
    required: false
    type: string
  ATTESTATIONS:
    # Attestations should NOT be enabled for development builds
    description: "Apply GitHub attestations to artefacts"
    required: false
    type: boolean
    default: false
  SIGSTORE_SIGN:
    # Signing should NOT be enabled for development builds
    description: "Sign build artefacts with Sigstore"
    required: false
    type: boolean
    default: false
  PATH_PREFIX:
    description: "Directory location containing project code"
    required: false
    type: string
  TOX_BUILD:
    description: "Attempt to use TOX to perform build"
    required: false
    type: boolean
    default: false

outputs:
  BUILD_PYTHON_VERSION:
    description: "Python version used to perform build (create artefacts)"
    value: "${{ steps.python-metadata.outputs.build_python_version }}"
  MATRIX_JSON:
    description: "Project supported Python versions as JSON"
    value: ${{ steps.python-metadata.outputs.matrix_json }}
  ARTEFACT_NAME:
    description: "Build artefacts will be output to this folder/directory"
    value: ${{ steps.python-metadata.outputs.python_project_name }}
  ARTEFACT_PATH:
    description: "Build artefacts will be output to this folder/directory"
    value: ${{ inputs.artefact_path }}

runs:
  using: "composite"
  steps:
    - name: "Setup action/environment"
      shell: bash
      run: |
        # Setup action/environment

        # Handle path_prefix input consistently and when absent
        path_prefix="${{ inputs.PATH_PREFIX }}"
        if [ -z "$path_prefix" ]; then
          # Set current directory as path prefix
          path_prefix="."
        else
          # Strip any trailing slash in provided path
          path_prefix="${path_prefix%/}"
        fi
        # Verify is a valid directory path
        if [ ! -d "$path_prefix" ]; then
          echo "Error: invalid path/prefix to project directory ❌"; exit 1
        fi
        echo "path_prefix=$path_prefix" >> "$GITHUB_ENV"

        # Output build heading
        echo "# 🐍 Python Build" >> "$GITHUB_STEP_SUMMARY"
        # Update PIP and build module
        python -m pip install --disable-pip-version-check \
          -q --upgrade pip build packaging

        # Set build parameters/variables
        echo "Action triggered by: ${GITHUB_TRIGGERING_ACTOR}"
        datetime=$(date +'%Y-%m-%d-%H%M')
        echo "Build date and time stamp: $datetime"
        echo "datetime=$datetime" >> "$GITHUB_ENV"
        echo "datetime=${datetime}" >> "$GITHUB_OUTPUT"

        if [ ${{ inputs.PURGE_ARTEFACT_PATH }} ] && \
           [ -d ${{ inputs.path_prefix }}/${{ inputs.ARTEFACT_PATH }} ]; then
          echo "Purging artefact output path prior to build ⚠️"
          echo "Path: ${{ inputs.path_prefix }}/${{ inputs.ARTEFACT_PATH }}"
          rm -Rf ${{ inputs.path_prefix }}/${{ inputs.ARTEFACT_PATH }}/*
        fi

    - name: "Gather Python project metadata"
      id: python-metadata
      # yamllint disable-line rule:line-length
      uses: lfreleng-actions/python-project-metadata-action@c3dcc3a603720f88d1cb6b855b95a4efad1db210 # v0.1.7
      with:
        path_prefix: "${{ env.path_prefix }}"

    # Catch this condition early in build process
    - name: "Check project version matches pushed tags"
      if: startsWith(github.ref, 'refs/tags/')
      # yamllint disable-line rule:line-length
      uses: lfreleng-actions/python-project-tag-push-verify-action@0ddfb400a8b6f1178eabbe342c91938ecf1ab01e # v0.1.2
      with:
        path_prefix: "${{ env.path_prefix }}"

    - name: "Explicit build versioning"
      if: inputs.tag != ''
      shell: bash
      run: |
        # Explicit build versioning
        echo "Explicit build versioning: ${{ inputs.tag }} 💬"

    - name: "Patch project versioning metadata"
      # Optionally patch Python project file to match requested build tag
      if: env.python_project_version != inputs.tag
      # yamllint disable-line rule:line-length
      uses: lfreleng-actions/python-project-version-patch-action@ff8c1187171dbb476a5c42b044f9e48fb2331929 # v0.1.3
      with:
        replacement_version: ${{ inputs.tag }}
        path_prefix: "${{ env.path_prefix }}"

    - name: "Setup Python"
      # yamllint disable-line rule:line-length
      uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
      with:
        # yamllint disable-line rule:line-length
        python-version: "${{ steps.python-metadata.outputs.build_python_version }}"

    - name: "Build with TOX"
      # yamllint disable-line rule:line-length
      if: ${{ env.tox_build == 'true' }}
      shell: bash
      run: |
        # Perform build with TOX
        if [ -f ${{ env.path_prefix }}/tox.ini ]; then
          echo "TOX configuration file present: ${{ env.path_prefix }}/tox.ini"
          python -m pip install --disable-pip-version-check \
            -q --upgrade tox tox-gh-actions
          echo "Building with: tox --root ${{ env.path_prefix }} -e build"
          if (tox --root ${{ env.path_prefix }} -e build); then
            echo "Build with TOX successful ✅"
          else
            echo "Build with TOX failed ❌"; exit 1
          fi
        else
          echo "Error: TOX configuration not found ❌"; exit 1
        fi

    - name: "Build Python project"
      # yamllint disable-line rule:line-length
      if: ${{ env.tox_build != 'true' }}
      shell: bash
      run: |
        # Build Python project
        if [ -f ${{ env.path_prefix }}/pyproject.toml ] || \
        [ -f ${{ env.path_prefix }}/setup.py ]; then
          if (python -m build --outdir \
            ${{ env.path_prefix }}/${{ inputs.ARTEFACT_PATH }} \
            ${{ env.path_prefix }}); then
            echo "Build with Python module successful ✅"
          else
            echo "Build with Python module failed ❌"; exit 1
          fi
        else
          echo "Error: project definition file not found ❌"; exit 1
        fi

    - name: "Build outputs/summary"
      shell: bash
      # yamllint disable rule:line-length
      run: |
        # Build outputs/summary
        echo "artefact_name=${{ env.python_project_name }}" >> "$GITHUB_OUTPUT"
        echo "artefact_path=${{ env.path_prefix }}/${{ inputs.ARTEFACT_PATH }}" \
          >> "$GITHUB_OUTPUT"
        echo "Artefact name: ${{ env.python_project_name }}"
        echo "Artefact path: ${{ env.path_prefix }}/${{ inputs.ARTEFACT_PATH }}"
        VERSION=$(python --version)
        echo "Build with $VERSION successful ✅"
        echo "Build with $VERSION successful ✅" >> "$GITHUB_STEP_SUMMARY"

    # Note: caution with sequencing of steps
    # Twine validation after attestations/signing causes failures
    # yamllint enable rule:line-length
    - name: "Validate artefacts with Twine"
      # yamllint disable-line rule:line-length
      uses: lfreleng-actions/python-twine-check-action@514f458fad2cfe506da1e472d2a68c4297fcbf94 # v0.1.1
      with:
        path_prefix: ${{ env.path_prefix }}
        path: "${{ inputs.ARTEFACT_PATH }}"

    - name: "Perform artefact attestations"
      # yamllint disable-line rule:line-length
      uses: actions/attest-build-provenance@c074443f1aee8d4aeeae555aebba3282517141b2 # v2.2.3
      if: ${{ env.attestations == 'true' }}
      with:
        subject-path: "${{ env.path_prefix }}/${{ inputs.ARTEFACT_PATH }}/*"

    - name: "Add heading to separate signing from attestations"
      if: ${{ env.sigstore_sign == 'true' }}
      shell: bash
      run: |
        # Add heading to separate signing from attestations
        echo "### Sigstore Signing ✍🏼" >> "$GITHUB_STEP_SUMMARY"

    # SigStore signing adds JSON files to the artefacts directory
    - name: "Sign packages with SigStore"
      if: ${{ env.sigstore_sign == 'true' }}
      # yamllint disable-line rule:line-length
      uses: sigstore/gh-action-sigstore-python@f514d46b907ebcd5bedc05145c03b69c1edd8b46 # v3.0.0
      env:
        package-path: "${{ inputs.path_prefix }}/${{ inputs.ARTEFACT_PATH }}"
      with:
        inputs: >-
          ./${{ env.path_prefix }}${{ inputs.ARTEFACT_PATH }}/*.tar.gz
          ./${{ env.path_prefix }}${{ inputs.ARTEFACT_PATH }}/*.whl

    - name: "Upload build artefacts"
      if: ${{ inputs.artefact_upload == 'true' }}
      # yamllint disable-line rule:line-length
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: "${{ env.python_project_name }}"
        path: "${{ env.path_prefix }}/${{ inputs.ARTEFACT_PATH }}"
        if-no-files-found: error
        overwrite: ${{ inputs.PURGE_ARTEFACT_PATH }}
