---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# Action test/validation workflow
name: "Test GitHub Action üß™"

# yamllint disable-line rule:truthy
on:
  workflow_dispatch:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: {}

jobs:
  ### Test the GitHub Action in this Repository ###
  tests:
    name: "Test local GitHub Action"
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    timeout-minutes: 10 # Increase this timeout value as needed
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # Perform setup prior to running test(s)
      - name: "Checkout sample project repository"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          repository: "lfreleng-actions/test-python-project"
          path: "test-python-project"

      # Perform test build
      - name: "Run action: ${{ github.repository }} [Static versioning]"
        uses: ./
        with:
          path_prefix: "test-python-project"
      # Perform test build again with TOX
      - name: "Run action: ${{ github.repository }} [Build using TOX]"
        uses: ./
        with:
          path_prefix: "test-python-project"
          purge_artefact_path: true
          tox_build: true

      # Build with explicit versioning
      - name: "Run action: ${{ github.repository }} [Explicit versioning]"
        uses: ./
        with:
          path_prefix: "test-python-project/"
          purge_artefact_path: true
          tag: "v2.0.0"
          artefact_path: "explicit_tag"

      - name: "Validate artefacts from above build"
        shell: bash
        run: |
          # Validate artefacts from above build
          if (find 'test-python-project/explicit_tag' -name '*2.0.0*'); then
            echo "Explicit tag/artefact path as expected ‚úÖ"
          else
            echo "Error: build artefact validation failed ‚ùå"; exit 1
          fi

      - name: "Setup dynamic versioning/PDM"
        shell: bash
        run: |
          # Swap test project to dynamic versioning
          cp test-python-project/variations/dynamic-pdm.toml \
            test-python-project/pyproject.toml

      # Perform test build for dynamically versioned project
      - name: "Run action: ${{ github.repository }} [Dynamic versioning/PDM]"
        uses: ./
        with:
          path_prefix: "test-python-project"
          purge_artefact_path: true

      - name: "Setup dynamic versioning/PDM"
        shell: bash
        run: |
          # Swap test project to dynamic versioning
          cp test-python-project/variations/dynamic-setuptools.toml \
            test-python-project/pyproject.toml

      # Perform test build for dynamically versioned project
      # yamllint disable-line rule:line-length
      - name: "Run action: ${{ github.repository }} [Dynamic versioning/Setuptools]"
        uses: ./
        continue-on-error: true  # Needed until fully supported
        with:
          path_prefix: "test-python-project"
          purge_artefact_path: true

      - name: "Setup dynamic versioning/Poetry"
        shell: bash
        run: |
          # Swap test project to dynamic versioning
          cp test-python-project/variations/dynamic-poetry.toml \
            test-python-project/pyproject.toml

      # Perform test build for dynamically versioned project
      - name: "Run action: ${{ github.repository }} [Dynamic versioning/Poetry]"
        uses: ./
        continue-on-error: true  # Needed until fully supported
        with:
          path_prefix: "test-python-project"
          purge_artefact_path: true
